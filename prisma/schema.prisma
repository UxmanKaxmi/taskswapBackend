generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id        String   @id @default(uuid())
  text      String
  type      TaskType
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  remindAt  DateTime? // For reminders
  options   String[]  @default([]) // For decisions (poll options)
  deliverAt DateTime? // For motivation (scheduled delivery)

  avatar      String    @default("")
  name        String    @default("")
  completed   Boolean   @default(false)
  completedAt DateTime? // ✅ Add this line
  helpers     User[]    @relation("TaskHelpers")

  ReminderNote ReminderNote[]

  @@unique([text, userId])
}

model User {
  id        String   @id
  email     String   @unique
  name      String
  photo     String?
  createdAt DateTime @default(now())

  tasks        Task[]
  ReminderNote ReminderNote[]

  followers Follow[] @relation("FollowedBy")
  following Follow[] @relation("Following")

  notifications     Notification[] @relation("UserNotifications")
  sentNotifications Notification[] @relation("SenderNotifications")
  fcmToken          String? // ✅ Add this line
  helping           Task[]         @relation("TaskHelpers")
}

model ReminderNote {
  id        String   @id @default(uuid())
  taskId    String
  senderId  String
  message   String
  createdAt DateTime @default(now())

  task   Task @relation(fields: [taskId], references: [id])
  sender User @relation(fields: [senderId], references: [id])
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("FollowedBy", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Notification {
  id String @id @default(uuid())

  userId String
  user   User   @relation("UserNotifications", fields: [userId], references: [id])

  senderId String?
  sender   User?   @relation("SenderNotifications", fields: [senderId], references: [id])

  type      String
  message   String
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
}

enum TaskType {
  reminder
  advice
  decision
  motivation
}
